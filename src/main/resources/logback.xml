<?xml version="1.0" encoding="UTF-8"?>
<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒 -->
<!-- 下面描述的是：当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!--property name="log_dir" value="${TAS_HOME:-..}/logs"/-->
    <!--property name="log_dir" value="${CATALINA_HOME:-..}/logs"/-->
    <!-- 其中TAS_HOME,CATALINA_HOME分别是两个变量引用，表示为TAS的home目录，或者tomcat的home目录 -->
    <!-- 变量后面的“:-..”表示，如果该变量（TAS_HOME、CATALINA_HOME）没有定义，则改变为对应目录（程序运行目录）的父目录，通常情况下，该目为bin目录。 -->
	<!-- 这个配置在logback框架，tas中间件的命令服务后启动两种启动形式测试通过。通过这个表达式，我们可以就可以实现日志文件放到中间件目录下的logs目录的目标。 -->
    <property name="log_dir" value="${TAS_HOME:-..}/logs/sc"/>
	<!-- 定义日志文件输出位置 -->
	<!-- 日志最大的保留事件，单位：天 -->
	<property name="maxHistory" value="30" />

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n</pattern>
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/error-log.log</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。 -->
		<!-- <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"> 
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern> <minIndex>1</minIndex> 
			<maxIndex>3</maxIndex> </rollingPolicy> -->
		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
		<!-- <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> 
			<maxFileSize>20MB</maxFileSize> </triggeringPolicy> -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %red(%-5level) %logger - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- WARN级别日志 appender -->
	<appender name="WARN"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/warn-log.log</fileNamePattern>
			<!-- 日志最大的历史 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %yellow(%-5level) %logger - %msg%n</pattern>
		</encoder>
		<loggers>
			<root level="warn">
				<appender-ref ref="Console" />
			</root>
		</loggers>
	</appender>

	<!-- INFO级别日志 appender -->
	<appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/info.log</fileNamePattern>
			<!-- 日志最大的历史 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%green(%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n)</pattern>
		</encoder>
		<loggers>
			<root level="info">
				<appender-ref ref="Console" />
			</root>
		</loggers>
	</appender>

	<!-- DEBUG级别日志 appender -->
	<appender name="DEBUG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/debug-log.log</fileNamePattern>
			<!-- 日志最大的历史 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
		<loggers>
			<root level="debug">
				<appender-ref ref="Console" />
			</root>
		</loggers>
	</appender>

	<!-- TRACE级别日志 appender -->
	<appender name="TRACE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>TRACE</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/trace-log.log</fileNamePattern>
			<!-- 日志最大的历史 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
		<loggers>
			<root level="trace">
				<appender-ref ref="Console" />
			</root>
		</loggers>
	</appender>

	<!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
	<appender name="scLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤非 INFO包 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<!-- <level>TRACE</level> -->
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/sceneCalc.log</fileNamePattern>
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>50MB</MaxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
		</encoder>
	</appender>

	<logger name="com.server" additivity="true">
		<!-- <level value="ERROR" /> -->
		<appender-ref ref="scLog" />
	</logger>

	<!-- root级别 DEBUG -->
	<root level="info">
		<!-- 控制台输出 -->
		<appender-ref ref="STDOUT" />
		<!-- 文件输出 -->
		<!--<appender-ref ref="INFO"/>-->
	</root>

</configuration>